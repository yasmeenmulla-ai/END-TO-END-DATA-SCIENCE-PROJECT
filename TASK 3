import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.datasets import make_regression
import joblib
import numpy as np

# 1. Data Generation (Synthetic Data)
X, y = make_regression(n_samples=1000, n_features=5, noise=10, random_state=42)  # 5 features
feature_names = [f'feature_{i}' for i in range(5)]  # Create feature names
X = pd.DataFrame(X, columns=feature_names) # Convert X to Pandas DataFrame
y = pd.Series(y) # Convert y to Pandas Series

# 2. Data Splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Data Scaling (Important for Linear Regression)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 4. Model Training
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# 5. Model Evaluation (Optional, but good practice)
y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# 6. Model and Scaler Persistence
joblib.dump(model, 'model.pkl')
joblib.dump(scaler, 'scaler.pkl')

print("Model and scaler saved!")
